<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Elegant Product Details</title>

    <!-- Modern CSS Libraries -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://unpkg.com/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet">
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600;700&family=Roboto:wght@300;400;500&display=swap" rel="stylesheet">

</head>
    <style>
        /* Scope all styles under the product-details-page class */
        .product-details-page {
            --primary-color: #3B82F6;
            --secondary-color: #10B981;
            --text-color: #1F2937;
            --background-color: #F3F4F6;
            padding-top: 110px; /* Account for fixed header */
        }
        
        .product-details-page .product-container {
            background: white;
            border-radius: 1rem;
            box-shadow: 0 10px 25px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            display: flex;
            margin: 0 20px;
        }
        
        .product-details-page .product-container:hover {
            transform: translateY(-10px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.15);
        }
        
        .product-details-page .product-image {
            border-radius: 1rem;
            overflow: hidden;
            position: relative;
            width: 50%;
        }
        
        .product-details-page .product-image img {
            width: 100%;
            height: 500px;
            object-fit: cover;
            transition: transform 0.5s ease;
        }
        
        .product-details-page .product-image:hover img {
            transform: scale(1.1);
        }
        
        .product-details-page .product-details {
            padding: 2rem;
            width: 50%;
        }
        
        .product-details-page .price-tag {
            background-color: var(--primary-color);
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 50px;
            font-weight: bold;
            display: inline-block;
        }
        
        .product-details-page .quantity-control {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 1rem 0;
        }
        
        .product-details-page .quantity-control button {
            width: 30px;
            height: 30px;
            border: 1px solid #ccc;
            background: #fff;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
        }
        
        .product-details-page .quantity-control input {
            width: 40px;
            text-align: center;
            border: none;
            font-size: 1rem;
            -moz-appearance: textfield;
        }
        
        .product-details-page .quantity-control input::-webkit-outer-spin-button,
        .product-details-page .quantity-control input::-webkit-inner-spin-button {
            -webkit-appearance: none;
            margin: 0;
        }
        
        .product-details-page .size-selector,
        .product-details-page .color-selector {
            display: flex;
            gap: 0.5rem;
            margin: 1rem 0;
        }
        
        .product-details-page .size-button {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }
        
        .product-details-page .size-button.selected {
            background-color: var(--primary-color);
            color: white;
        }
        
        .product-details-page .color-button {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 2px solid transparent;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .product-details-page .color-button.selected {
            transform: scale(1.2);
            border: 2px solid #000;
        }
        
        .product-details-page .action-buttons {
            display: flex;
            gap: 1rem;
            margin-top: 2rem;
        }
        
        .product-details-page .action-buttons a {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.75rem 1.5rem;
            border-radius: 50px;
            font-weight: bold;
            text-transform: uppercase;
            transition: all 0.3s ease;
            text-decoration: none;
        }
        
        .product-details-page .action-buttons a.btn-primary {
            background-color: var(--primary-color);
            color: white;
        }
        
        .product-details-page .action-buttons a.btn-secondary {
            background-color: var(--secondary-color);
            color: white;
        }
        
        .product-details-page .review-card {
            background: white;
            border-radius: 1rem;
            padding: 1.5rem;
            box-shadow: 0 5px 15px rgba(0,0,0,0.08);
        }
        
        .product-details-page .star-rating {
            color: #FFC107;
        }
        
        @media (max-width: 768px) {
            .product-details-page .product-container {
                flex-direction: column;
            }
            
            .product-details-page .product-image,
            .product-details-page .product-details {
                width: 100%;
            }
            
            .product-details-page .product-image img {
                height: 300px;
            }
            
            .product-details-page .action-buttons {
                flex-direction: column;
            }
        }
        </style>

    <body class="bg-gray-100">
    <%- include("header.ejs") %>
    <div class="product-details-page">
    <div class="container mx-auto py-10">
        <% if (itemDetails) { %>
            <div class="product-container flex animate__animated animate__fadeIn">
                <!-- Product Image Section -->
                <!-- Product Image Section -->
                <div class="product-image w-full md:w-1/2">
                    <div id="productCarousel" class="carousel slide" data-bs-ride="carousel">
                        <div class="carousel-inner">
                            <!-- Main product image -->
                            <div class="carousel-item active">
                                <img src="<%= itemDetails[0].img %>" alt="<%= itemDetails[0].name %>">
                            </div>
                            
                            <!-- Variant images from product_details table -->
                            <% if (itemDetails[0].variants && itemDetails[0].variants.length > 0) { %>
                                <% itemDetails[0].variants.forEach(variant => { %>
                                    <!-- Primary variant image -->
                                    <% if (variant.img && variant.img !== itemDetails[0].img) { %>
                                        <div class="carousel-item">
                                            <img src="<%= variant.img %>" alt="<%= itemDetails[0].name %> Variant">
                                        </div>
                                    <% } %>
                                    
                                    <!-- Second variant image -->
                                    <% if (variant.img1) { %>
                                        <div class="carousel-item">
                                            <img src="<%= variant.img1 %>" alt="<%= itemDetails[0].name %> Variant">
                                        </div>
                                    <% } %>
                                    
                                    <!-- Third variant image -->
                                    <% if (variant.img2) { %>
                                        <div class="carousel-item">
                                            <img src="<%= variant.img2 %>" alt="<%= itemDetails[0].name %> Variant">
                                        </div>
                                    <% } %>
                                <% }); %>
                            <% } %>
                        </div>
                        
                        <!-- Carousel Controls -->
                        <button class="carousel-control-prev" type="button" data-bs-target="#productCarousel" data-bs-slide="prev">
                            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Previous</span>
                        </button>
                        <button class="carousel-control-next" type="button" data-bs-target="#productCarousel" data-bs-slide="next">
                            <span class="carousel-control-next-icon" aria-hidden="true"></span>
                            <span class="visually-hidden">Next</span>
                        </button>
                        
                        <!-- Carousel Indicators -->
                        <div class="carousel-indicators">
                            <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
                            
                            <% if (itemDetails[0].variants && itemDetails[0].variants.length > 0) { %>
                                <% let slideIndex = 1; %>
                                <% itemDetails[0].variants.forEach(variant => { %>
                                    <% if (variant.img && variant.img !== itemDetails[0].img) { %>
                                        <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="<%= slideIndex %>" aria-label="Slide <%= slideIndex + 1 %>"></button>
                                        <% slideIndex++; %>
                                    <% } %>
                                    <% if (variant.img1) { %>
                                        <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="<%= slideIndex %>" aria-label="Slide <%= slideIndex + 1 %>"></button>
                                        <% slideIndex++; %>
                                    <% } %>
                                    <% if (variant.img2) { %>
                                        <button type="button" data-bs-target="#productCarousel" data-bs-slide-to="<%= slideIndex %>" aria-label="Slide <%= slideIndex + 1 %>"></button>
                                        <% slideIndex++; %>
                                    <% } %>
                                <% }); %>
                            <% } %>
                        </div>
                    </div>
                </div>
                <!-- Product Details Section -->
                <div class="product-details w-full md:w-1/2">
                    <h1 class="text-3xl font-bold mb-4"><%= itemDetails[0].name %></h1>
                    <div class="price-tag inline-block mb-4">₹<%= itemDetails[0].price %></div>
                    
                    <!-- Quantity Control -->
                    <div class="quantity-control">
                        <button id="decrement-btn" type="button">-</button>
                        <input type="number" id="quantity-input" value="1" min="1" max="<%= itemDetails[0].quantity %>" readonly>
                        <button id="increment-btn" type="button">+</button>
                    </div>
    
                    <!-- Size Selection -->
                    <!-- Size Selection -->
<div class="mb-4">
    <h3 class="text-xl font-semibold mb-2">Select Size</h3>
    <div class="size-selector">
        <% if (itemDetails[0].variants && itemDetails[0].variants.length > 0) { %>
            <% 
                const uniqueSizes = [...new Set(itemDetails[0].variants
                    .map(v => v.size)
                    .filter(size => size && size.trim() !== ''))]; 
            %>
            <% if (uniqueSizes.length > 0) { %>
                <% uniqueSizes.forEach(size => { %>
                    <button class="size-button btn btn-outline-secondary" data-size="<%= size %>">
                        <%= size %>
                    </button>
                <% }); %>
            <% } else { %>
                <button class="size-button btn btn-outline-secondary selected" data-size="OneSize">
                    One Size
                </button>
            <% } %>
        <% } else { %>
            <button class="size-button btn btn-outline-secondary selected" data-size="OneSize">
                One Size
            </button>
        <% } %>
    </div>
</div>
    
                    <!-- Color Selection -->
                    <div class="mb-4">
                        <h3 class="text-xl font-semibold mb-2">Select Color</h3>
                        <div class="color-selector">
                            <% if (itemDetails[0].variants && itemDetails[0].variants.length > 0) { %>
                                <% 
                                    const uniqueColors = [...new Set(itemDetails[0].variants
                                        .map(v => v.color)
                                        .filter(color => color && color.trim() !== ''))]; 
                                %>
                                <% if (uniqueColors.length > 0) { %>
                                    <% uniqueColors.forEach((color, index) => { %>
                                        <div class="color-button <%= index === 0 ? 'selected' : '' %>" 
                                             style="background-color: <%= color %>;" 
                                             data-color="<%= color %>"></div>
                                    <% }); %>
                                <% } else { %>
                                    <div class="color-button selected" style="background-color: #000000;" data-color="#000000"></div>
                                <% } %>
                            <% } else { %>
                                <div class="color-button selected" style="background-color: #000000;" data-color="#000000"></div>
                            <% } %>
                        </div>
                    </div>
    
                    <% if (itemDetails[0].short_description) { %>
                        <div class="mb-4">
                            <h3 class="text-xl font-semibold mb-2">Overview</h3>
                            <p class="text-gray-600"><%= itemDetails[0].short_description %></p>
                        </div>
                    <% } %>
                    <% if (itemDetails[0].description) { %>
                        <div class="mb-4">
                            <h3 class="text-xl font-semibold mb-2">Description</h3>
                            <p class="text-gray-600"><%= itemDetails[0].description %></p>
                        </div>
                    <% } %>
                    <% if (itemDetails[0].detailed_description) { %>
                        <div class="mb-4">
                            <h3 class="text-xl font-semibold mb-2">Details</h3>
                            <p class="text-gray-600"><%= itemDetails[0].detailed_description %></p>
                        </div>
                    <% } %>

                    <% if (itemDetails[0].features && itemDetails[0].features.length > 0) { %>
                        <div class="mb-4">
                            <h3 class="text-xl font-semibold mb-2">Features</h3>
                            <ul class="list-disc pl-5">
                                <% itemDetails[0].features.forEach(feature => { %>
                                    <li class="text-gray-600"><%= feature %></li>
                                <% }); %>
                            </ul>
                        </div>
                    <% } %>

                    <% if (itemDetails[0].why_choose) { %>
                        <div class="mb-4">
                            <h3 class="text-xl font-semibold mb-2">Why Choose This</h3>
                            <p class="text-gray-600"><%= itemDetails[0].why_choose %></p>
                        </div>
                    <% } %>

    
                    <!-- Action Buttons -->
                    <div class="action-buttons">
                        <a href="/AddToCart" class="btn btn-primary addItemsToCart" 
                           data-item-type="<%= itemDetails[0].item_type %>" 
                           data-item-id="<%= itemDetails[0].item_id %>">
                            <i class="fas fa-shopping-cart mr-2"></i>Add to Cart
                        </a>
                        <a href="/CheckOut" class="btn btn-secondary buyNow" 
                           data-item-type="<%= itemDetails[0].item_type %>" 
                           data-item-id="<%= itemDetails[0].item_id %>">
                            <i class="fas fa-credit-card mr-2"></i>Buy Now
                        </a>
                    </div>
                </div>
            </div>
    
            <!-- Customer Reviews Section -->
            <div class="mt-10">
                <% if (itemDetails.customerReviews && itemDetails.customerReviews.length > 0) { %>
                    <h2 class="text-2xl font-bold text-center mb-6">Customer Reviews</h2>
                    <div class="grid md:grid-cols-3 gap-6">
                        <% itemDetails.customerReviews.forEach(review => { %>
                            <div class="review-card animate__animated animate__fadeInUp">
                                <div class="flex items-center mb-4">
                                    <img src="<%= review.img %>" class="rounded-full mr-4" alt="<%= review.name %>">
                                    <div>
                                        <h4 class="font-semibold"><%= review.name %></h4>
                                        <div class="star-rating">
                                            <% for(let i = 0; i < review.rating; i++) { %>
                                                <i class="fas fa-star"></i>
                                            <% } %>
                                            <% for(let i = review.rating; i < 5; i++) { %>
                                                <i class="far fa-star"></i>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                                <p class="text-gray-600">"<%= review.comment %>"</p>
                            </div>
                        <% }); %>
                    </div>
                <% } %>
            </div>
        <% } else { %>
            <p class="text-center text-muted">No product details available.</p>
        <% } %>
    </div>
        <!-- Toast Notifications -->
        <div id="toast-container" class="position-fixed bottom-0 end-0 p-3">
            <!-- Success Toast -->
            <div id="toast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Success</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    Item successfully added to cart!
                </div>
            </div>
            <!-- Login Required Toast -->
            <div id="toast-login" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header bg-warning text-dark">
                    <strong class="me-auto">Login Required</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body text-dark">
                    Please log in to continue.
                </div>
            </div>
        </div>
    </div>	
    <!-- JavaScript Libraries -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Interactive color and size selection
        document.querySelectorAll('.size-button').forEach(button => {
            button.addEventListener('click', function() {
                document.querySelectorAll('.size-button').forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
            });
        });

        document.querySelectorAll('.color-button').forEach(button => {
            button.addEventListener('click', function() {
                document.querySelectorAll('.color-button').forEach(btn => btn.style.border = 'none');
                this.style.border = '2px solid var(--primary-color)';
            });
        });
    </script>


    <!-- below script is for Check out button and also handles when the user is not logged in -->
<!-- <script>
    document.addEventListener("DOMContentLoaded", () => {
        const checkoutButton = document.querySelectorAll(".buyNow");
    
        checkoutButton.forEach(button => {
            button.addEventListener("click", async (event) => {
                event.preventDefault();
    
                // Retrieve all necessary details
                const item_id = button.getAttribute("data-item-id");
                const item_type = button.getAttribute("data-item-type");
                const quantity = document.getElementById("quantity-input").value;
                
                // Get selected size
                const selectedSizeElement = document.querySelector('.size-button.active');
                const size = selectedSizeElement ? selectedSizeElement.getAttribute('data-size') : null;
                
                // Get selected color
                const selectedColorElement = document.querySelector('.color-button[style*="border: 2px solid"]');
                const color = selectedColorElement ? selectedColorElement.style.backgroundColor : null;
    
                try {
                    const response = await fetch("/CheckOut", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ 
                            item_id, 
                            item_type, 
                            quantity,
                            size,      // Add size
                            color      // Add color
                        }),
                    });
                    
                    // Rest of the existing checkout logic remains the same
                    // ...
                } catch (error) {
                    console.log("Checkout failed", error);
                }
            });
        });
    });
    </script> -->
    <!-- <script>
    document.addEventListener("DOMContentLoaded", () => {
        // Initialize size and color buttons
        const sizeButtons = document.querySelectorAll('.size-button');
        const colorButtons = document.querySelectorAll('.color-button');
        
        // Add click event handlers for size buttons
        sizeButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all size buttons
                sizeButtons.forEach(btn => btn.classList.remove('active', 'selected'));
                // Add active class to clicked button
                this.classList.add('active', 'selected');
            });
        });
        
        // Add click event handlers for color buttons
        colorButtons.forEach(button => {
            button.addEventListener('click', function() {
                // Remove selected class from all color buttons
                colorButtons.forEach(btn => btn.classList.remove('selected'));
                // Remove borders from all color buttons
                colorButtons.forEach(btn => btn.style.border = '2px solid transparent');
                // Add selected class and border to clicked button
                this.classList.add('selected');
                this.style.border = '2px solid var(--primary-color)';
            });
        });
        
        // Auto-select first size and color if available
        if (sizeButtons.length > 0) {
            sizeButtons[0].classList.add('active', 'selected');
        }
        
        if (colorButtons.length > 0) {
            colorButtons[0].classList.add('selected');
            colorButtons[0].style.border = '2px solid var(--primary-color)';
        }
        
        // Handle cart and checkout buttons
        const cartButtons = document.querySelectorAll(".addItemsToCart, .buyNow");
        
        cartButtons.forEach(button => {
            button.addEventListener("click", async (event) => {
                event.preventDefault();
                
                // Get selected size and color
                const selectedSizeElement = document.querySelector('.size-button.selected') || document.querySelector('.size-button.active');
                const selectedColorElement = document.querySelector('.color-button.selected') || document.querySelector('.color-button[style*="border: 2px solid"]');
                const quantityInput = document.getElementById("quantity-input");
                
                // Validate selections
                if (!selectedSizeElement) {
                    alert("Please select a size");
                    return;
                }
                
                // Prepare payload
                const payload = {
                    item_id: button.getAttribute("data-item-id"),
                    item_type: button.getAttribute("data-item-type"),
                    quantity: quantityInput.value,
                    size: selectedSizeElement.getAttribute('data-size')
                };
                
                // Add color to payload if available
                if (selectedColorElement) {
                    payload.color = selectedColorElement.getAttribute('data-color') || selectedColorElement.style.backgroundColor;
                }
                
                const endpoint = button.classList.contains('addItemsToCart') ? "/AddToCart" : "/CheckOut";
                
                try {
                    const response = await fetch(endpoint, {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(payload)
                    });
                    
                    const data = await response.json();
                    
                    if (response.status === 401) {
                        const loginToast = new bootstrap.Toast(document.getElementById('toast-login'));
                        loginToast.show();
                    } else if (data.success) {
                        if (endpoint === "/AddToCart") {
                            const successToast = new bootstrap.Toast(document.getElementById('toast'));
                            successToast.show();
                        } else {
                            window.location.href = `/checkOutPage?item_id=${payload.item_id}&item_type=${payload.item_type}&quantity=${payload.quantity}&size=${payload.size}${payload.color ? `&color=${encodeURIComponent(payload.color)}` : ''}`;
                        }
                    } else {
                        console.error("Operation failed:", data.message);
                    }
                } catch (error) {
                    console.error("Request failed:", error);
                }
            });
        });
    });
    </script> -->
<!-- This below script is for everything -->
 <!-- <script>
  document.addEventListener("DOMContentLoaded", () => {
    // Initialize size and color buttons
    const sizeButtons = document.querySelectorAll('.size-button');
    const colorButtons = document.querySelectorAll('.color-button');
    const quantityInput = document.getElementById("quantity-input");
    const decrementBtn = document.getElementById("decrement-btn");
    const incrementBtn = document.getElementById("increment-btn");
    
    // Quantity control functionality
    if (decrementBtn && incrementBtn && quantityInput) {
        decrementBtn.addEventListener("click", () => {
            const currentValue = parseInt(quantityInput.value);
            if (currentValue > 1) {
                quantityInput.value = currentValue - 1;
            }
        });

        incrementBtn.addEventListener("click", () => {
            const currentValue = parseInt(quantityInput.value);
            const maxQuantity = parseInt(quantityInput.getAttribute("max"));
            if (currentValue < maxQuantity) {
                quantityInput.value = currentValue + 1;
            }
        });

        // Ensure direct input stays within bounds
        quantityInput.addEventListener("change", () => {
            const value = parseInt(quantityInput.value);
            const max = parseInt(quantityInput.getAttribute("max"));
            if (value < 1) quantityInput.value = 1;
            if (value > max) quantityInput.value = max;
        });
    }
    
    // Add click event handlers for size buttons
    sizeButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Remove active class from all size buttons
            sizeButtons.forEach(btn => {
                btn.classList.remove('active', 'selected');
            });
            // Add active class to clicked button
            this.classList.add('active', 'selected');
        });
    });
    
    // Add click event handlers for color buttons
    colorButtons.forEach(button => {
        button.addEventListener('click', function() {
            // Remove selected class from all color buttons
            colorButtons.forEach(btn => {
                btn.classList.remove('selected');
                btn.style.border = '2px solid transparent';
            });
            // Add selected class and border to clicked button
            this.classList.add('selected');
            this.style.border = '2px solid var(--primary-color)';
        });
    });
    
    // Auto-select first size and color if available
    if (sizeButtons.length > 0) {
        sizeButtons[0].classList.add('active', 'selected');
    }
    
    if (colorButtons.length > 0) {
        colorButtons[0].classList.add('selected');
        colorButtons[0].style.border = '2px solid var(--primary-color)';
    }
    
    // Handle cart and checkout buttons - SINGLE EVENT HANDLER FOR BOTH BUTTONS
    const cartButtons = document.querySelectorAll(".addItemsToCart, .buyNow");
    
    cartButtons.forEach(button => {
        button.addEventListener("click", async (event) => {
            event.preventDefault();
            
            // Get selected size and color
            const selectedSizeElement = document.querySelector('.size-button.selected');
            const selectedColorElement = document.querySelector('.color-button.selected');
            
            // Validate selections
            if (!selectedSizeElement) {
                alert("Please select a size");
                return;
            }
            
            if (!selectedColorElement) {
                alert("Please select a color");
                return;
            }
            
            // Get color value - FIX: properly extract the color
            let colorValue;
            if (selectedColorElement.hasAttribute('data-color')) {
                colorValue = selectedColorElement.getAttribute('data-color');
            } else {
                const computedStyle = window.getComputedStyle(selectedColorElement);
                colorValue = computedStyle.backgroundColor;
            }
            
            // Prepare payload
            const payload = {
                item_id: button.getAttribute("data-item-id"),
                item_type: button.getAttribute("data-item-type"),
                quantity: quantityInput.value,
                size: selectedSizeElement.getAttribute('data-size'),
                color: colorValue
            };
            
            const endpoint = button.classList.contains('addItemsToCart') ? "/AddToCart" : "/CheckOut";
            
            try {
                const response = await fetch(endpoint, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(payload)
                });
                
                const data = await response.json();
                
                if (response.status === 401) {
                    const loginToast = new bootstrap.Toast(document.getElementById('toast-login'));
                    loginToast.show();
                } else if (data.success) {
                    if (endpoint === "/AddToCart") {
                        const successToast = new bootstrap.Toast(document.getElementById('toast'));
                        successToast.show();
                    } else {
                        window.location.href = `/checkOutPage?item_id=${payload.item_id}&item_type=${payload.item_type}&quantity=${payload.quantity}&size=${payload.size}&color=${encodeURIComponent(payload.color)}`;
                    }
                } else {
                    console.error("Operation failed:", data.message);
                }
            } catch (error) {
                console.error("Request failed:", error);
            }
        });
    });

    // Initialize carousel if it exists
    const carousel = document.getElementById('productCarousel');
    if (carousel) {
        new bootstrap.Carousel(carousel, {
            interval: 3000, // Change slides every 3 seconds
            wrap: true     // Continue from last to first slide
        });
    }
});
</script> -->
<script>
    document.addEventListener("DOMContentLoaded", () => {
  // Initialize size and color buttons
  const sizeButtons = document.querySelectorAll('.size-button');
  const colorButtons = document.querySelectorAll('.color-button');
  const quantityInput = document.getElementById("quantity-input");
  const decrementBtn = document.getElementById("decrement-btn");
  const incrementBtn = document.getElementById("increment-btn");
  
  // Quantity control functionality
  if (decrementBtn && incrementBtn && quantityInput) {
      decrementBtn.addEventListener("click", () => {
          const currentValue = parseInt(quantityInput.value);
          if (currentValue > 1) {
              quantityInput.value = currentValue - 1;
          }
      });

      incrementBtn.addEventListener("click", () => {
          const currentValue = parseInt(quantityInput.value);
          const maxQuantity = parseInt(quantityInput.getAttribute("max"));
          if (currentValue < maxQuantity) {
              quantityInput.value = currentValue + 1;
          }
      });

      // Ensure direct input stays within bounds
      quantityInput.addEventListener("change", () => {
          const value = parseInt(quantityInput.value);
          const max = parseInt(quantityInput.getAttribute("max"));
          if (value < 1) quantityInput.value = 1;
          if (value > max) quantityInput.value = max;
      });
  }
  
  // Add click event handlers for size buttons
  sizeButtons.forEach(button => {
      button.addEventListener('click', function() {
          // Remove active class from all size buttons
          sizeButtons.forEach(btn => {
              btn.classList.remove('active', 'selected');
          });
          // Add active class to clicked button
          this.classList.add('active', 'selected');
      });
  });
  
  // Add click event handlers for color buttons
  colorButtons.forEach(button => {
      button.addEventListener('click', function() {
          // Remove selected class from all color buttons
          colorButtons.forEach(btn => {
              btn.classList.remove('selected');
              btn.style.border = '2px solid transparent';
          });
          // Add selected class and border to clicked button
          this.classList.add('selected');
          this.style.border = '2px solid #000';
          
          // Debug log to check the color value
          console.log("Selected color:", this.getAttribute('data-color'));
      });
  });
  
  // Auto-select first size and color if available
  if (sizeButtons.length > 0) {
      sizeButtons[0].classList.add('active', 'selected');
  }
  
  if (colorButtons.length > 0) {
      colorButtons[0].classList.add('selected');
      colorButtons[0].style.border = '2px solid #000';
  }
  
  // Handle cart and checkout buttons - SINGLE EVENT HANDLER FOR BOTH BUTTONS
  const cartButtons = document.querySelectorAll(".addItemsToCart, .buyNow");
  
  cartButtons.forEach(button => {
      button.addEventListener("click", async (event) => {
          event.preventDefault();
          
          // Get selected size and color
          const selectedSizeElement = document.querySelector('.size-button.selected');
          const selectedColorElement = document.querySelector('.color-button.selected');
          
          // Validate selections
          if (!selectedSizeElement) {
              alert("Please select a size");
              return;
          }
          
          if (!selectedColorElement) {
              alert("Please select a color");
              return;
          }
          
          // Get color value from data-color attribute
          let colorValue = selectedColorElement.getAttribute('data-color');
          
          // Log color value for debugging
          console.log("Color value being sent:", colorValue);
          
          // Prepare payload
          const payload = {
              item_id: button.getAttribute("data-item-id"),
              item_type: button.getAttribute("data-item-type"),
              quantity: quantityInput.value,
              size: selectedSizeElement.getAttribute('data-size'),
              color: colorValue
          };
          
          console.log("Sending payload:", payload);
          
          const endpoint = button.classList.contains('addItemsToCart') ? "/AddToCart" : "/CheckOut";
          
          try {
              const response = await fetch(endpoint, {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify(payload)
              });
              
              const data = await response.json();
              
              if (response.status === 401) {
                  const loginToast = new bootstrap.Toast(document.getElementById('toast-login'));
                  loginToast.show();
              } else if (data.success) {
                  if (endpoint === "/AddToCart") {
                      const successToast = new bootstrap.Toast(document.getElementById('toast'));
                      successToast.show();
                  } else {
                      window.location.href = `/checkOutPage?item_id=${payload.item_id}&item_type=${payload.item_type}&quantity=${payload.quantity}&size=${payload.size}&color=${encodeURIComponent(payload.color)}`;
                  }
              } else {
                  console.error("Operation failed:", data.message);
                  alert("Operation failed: " + (data.message || "Unknown error"));
              }
          } catch (error) {
              console.error("Request failed:", error);
              alert("Request failed. Please try again.");
          }
      });
  });

  // Initialize carousel if it exists
  const carousel = document.getElementById('productCarousel');
  if (carousel) {
      new bootstrap.Carousel(carousel, {
          interval: 3000, // Change slides every 3 seconds
          wrap: true     // Continue from last to first slide
      });
  }
});
</script>
    
</body>
</html>