<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/style/login.css" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    />
    <link
      href="https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css"
      rel="stylesheet"
    />
    <!--https://boxicons.com/ -->
    <title>Login</title>
  </head>
  <body>
    <div class="container" id="container">
      <div class="form-container sign-up">
        <form
          action="/SignUp"
          method="post"
          class="Form_StyleForSignUp Form_Responsiveness"
        >
          <h1 class="SignUp_Text">Create Account</h1>

          <div class="social-icons">
            <div class="g-signin2" data-onsuccess="onSignIn">
              <a href="/auth/google" class="btn btn-block icons" role="button">
                <i class="bx bxl-google"></i>
              </a>
            </div>
            <!-- <a href="#" class="icons"><i class='bx bxl-facebook'></i></a>
                    <a href="#" class="icons"><i class='bx bxl-github'></i></a>
                    <a href="#" class="icons"><i class='bx bxl-linkedin'></i></a> -->
          </div>
          <span>Register with E-mail</span>          
          <input
            type="text"
            name="FullName"
            class="FullName_Box SignUp_Boxes"
            placeholder="FullName"
            required
            autofocus
          />

          <input
            type="email"
            name="SignUp_Email"
            class="SignUp_Email_Box SignUp_Boxes"
            placeholder="Email"
            required
          />

          <div class="password-container" style="position: relative; width: 100%;">
            <input
              type="password"
              name="SignUp_Password"
              class="SignUp_Password_Box SignUp_Boxes"
              placeholder="Password"
              required
              minlength="8"
            />
            <i class="bx bx-hide password-toggle" style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%); cursor: pointer;"></i>
          </div>

          <input
            type="number"
            name="Mobile_number"
            class="Mobile_number_Box SignUp_Boxes"
            placeholder="Mobile_number"
            required
          />
          <button type="submit" class="SignUp_Login_button" value="SignUp">
            Sign Up
          </button>
        </form>
        
      </div>

      <div class="form-container sign-in">
        <form
          action="/Login"
          method="post"
          class="Form_Responsiveness Form_Style"
        >
          <h1 id="Login_Text">Sign In</h1>
          <div
            class="social-icons login_container_text grossAnnualIncome inputBox"
          >
            <div class="g-signin2" data-onsuccess="onSignIn">
              <a href="/auth/google" class="btn btn-block icons" role="button">
                <i class="bx bxl-google"></i>
              </a>
            </div>
            <!-- <a href="#" class="icons"><i class='bx bxl-facebook'></i></a>
                    <a href="#" class="icons"><i class='bx bxl-github'></i></a>
                    <a href="#" class="icons"><i class='bx bxl-linkedin'></i></a> -->
          </div>
          <span>Login With Email & Password</span>
          <input
            type="email"
            name="Email"
            required
            class="Email_Box"
            placeholder="Email"
            autofocus
          />
          <div class="password-container" style="position: relative; width: 100%;">
            <input
              type="password"
              name="Password"
              required
              class="Password_Box"
              placeholder="Password"
            />
            <i class="bx bx-hide password-toggle" style="position: absolute; right: 10px; top: 50%; transform: translateY(-50%); cursor: pointer;"></i>
          </div>
          <a href="/forgetPassword" style="color: red;">Forget Password?</a>
          <button type="submit" value="Login" class="SignIn_Login_button">
            Login
          </button>
        </form>
      </div>

      <div class="toggle-container">
        <div class="toggle">
          <div class="toggle-panel toggle-left">
            <h1>Sign in With ID & Password <br /></h1>
            <button class="hidden" id="login">Sign In</button>
          </div>
          <div class="toggle-panel toggle-right">
            <h1>Create new account</h1>
            <button class="hidden" id="register">Sign Up</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Below is the toast for forget password -->

    <div class="position-fixed top-0 start-0 p-3" style="z-index: 1100">
      <div
        id="notificationToast"
        class="toast"
        role="alert"
        aria-live="assertive"
        aria-atomic="true"
      >
        <div class="toast-header" id="toastHeader">
          <strong class="me-auto" id="toastTitle">Notification</strong>
          <button
            type="button"
            class="btn-close"
            data-bs-dismiss="toast"
            aria-label="Close"
          ></button>
        </div>
        <div class="toast-body" id="toastMessage">
          <!-- Dynamic message will be inserted here -->
        </div>
      </div>
    </div>

    <div id="global-tooltip-container" style="display: none">
      <div class="global-tooltip">
        <div class="tooltip-icon">
          <i class="bx bx-error"></i>
        </div>
        <span class="tooltip-message">Message goes here</span>
      </div>
    </div>
    <!-- Script for showing the toast for password reset -->
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        const urlParams = new URLSearchParams(window.location.search);
        const status = urlParams.get("status");
        const message = urlParams.get("message");

        if (status && message) {
          const toastEl = document.getElementById("notificationToast");
          const toastTitle = document.getElementById("toastTitle");
          const toastMessage = document.getElementById("toastMessage");
          const toastHeader = document.getElementById("toastHeader");

          if (status === "success") {
            toastHeader.classList.add("bg-success", "text-white");
            toastTitle.textContent = "Success";
          } else if (status === "error") {
            toastHeader.classList.add("bg-danger", "text-white");
            toastTitle.textContent = "Error";
          }

          toastMessage.textContent = decodeURIComponent(message);

          const toast = new bootstrap.Toast(toastEl);
          toast.show();
        }
      });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- This below script is responsible for movement of cover which is in z-index -->
    <script>
      const container = document.getElementById("container");
      const registerBtn = document.getElementById("register");
      const loginBtn = document.getElementById("login");

      registerBtn.addEventListener("click", () => {
        container.classList.add("active");
      });

      loginBtn.addEventListener("click", () => {
        container.classList.remove("active");
      });
    </script>
  </body>
  <!-- Global Tooltip System -->
  <script>
    const globalTooltip = {
      container: null,
      tooltip: null,
      messageEl: null,
      timeout: null,
      iconEl: null,

      init: function() {
        this.container = document.getElementById('global-tooltip-container');
        if (!this.container) return;

        // Make sure container is hidden initially
        this.container.style.display = 'none';

        this.tooltip = this.container.querySelector('.global-tooltip');
        this.messageEl = this.container.querySelector('.tooltip-message');
        this.iconEl = this.container.querySelector('.tooltip-icon i');

        // Add close button to tooltip if it doesn't exist
        if (!this.tooltip.querySelector('.close-tooltip')) {
          const closeBtn = document.createElement('button');
          closeBtn.className = 'close-tooltip';
          closeBtn.innerHTML = '<i class="bx bx-x"></i>';
          closeBtn.onclick = () => this.hide();
          this.tooltip.appendChild(closeBtn);
        }

        // Initialize any existing tooltips from server conditionally
        this.checkServerSideTooltips();
      },

      show: function(message, type = 'error', icon = 'bx-error', duration = 5000) {
        if (!this.container) this.init();
        if (!this.container) return;

        // Clear any existing timeout
        if (this.timeout) {
          clearTimeout(this.timeout);
          this.timeout = null;
        }

        // Update tooltip content
        this.messageEl.textContent = message;

        // Set icon
        this.iconEl.className = '';
        this.iconEl.classList.add('bx', icon);

        // Set tooltip type
        this.tooltip.className = 'global-tooltip';
        this.tooltip.classList.add(type);

        // Show tooltip
        this.container.style.display = 'block';

        // Trigger reflow to ensure animation works
        void this.tooltip.offsetWidth;

        // Add visible class to animate
        this.tooltip.classList.add('visible');

        // Auto-hide after duration if specified
        if (duration > 0) {
          this.timeout = setTimeout(() => {
            this.hide();
          }, duration);
        }

        return this;
      },

      hide: function() {
        if (!this.container || !this.tooltip) return;

        this.tooltip.classList.remove('visible');

        // Hide container after animation completes
        setTimeout(() => {
          this.container.style.display = 'none';
        }, 300);

        return this;
      },

      checkServerSideTooltips: function() {
        // Only check for server-side flags if they exist
        <% if (typeof signUp_ToolTip !== 'undefined' && signUp_ToolTip) { %>
          this.show('Email Already Exists', 'error', 'bx-error', 5000);
        <% } %>

        <% if (typeof login_toolTip !== 'undefined' && login_toolTip) { %>
          this.show('Incorrect Email or Password', 'error', 'bx-error', 5000);
        <% } %>

        <% if (typeof login_toolTip1 !== 'undefined' && login_toolTip1) { %>
          this.show('User Does not exist, Kindly Sign Up', 'warning', 'bx-user-x', 5000);
        <% } %>

        // Check URL parameters for other messages (e.g., from redirects)
        const urlParams = new URLSearchParams(window.location.search);
        const status = urlParams.get('status');
        const message = urlParams.get('message');

        if (status && message) {
          const decodedMessage = decodeURIComponent(message);
          const type = status === 'success' ? 'success' : status === 'error' ? 'error' : 'info';
          const icon = status === 'success' ? 'bx-check-circle' :
                       status === 'error' ? 'bx-error' : 'bx-info-circle';

          this.show(decodedMessage, type, icon, 5000);
        }
      }
    };

    // Initialize the tooltip system when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      globalTooltip.init();
    });

    // Convenience method to show tooltips from anywhere in your code
    function showTooltip(message, type = 'error', icon = 'bx-error', duration = 5000) {
      return globalTooltip.show(message, type, icon, duration);
    }
  </script>

  <!-- Below script is for toggling the eye in password input box -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const toggleButtons = document.querySelectorAll('.password-toggle');
      
      toggleButtons.forEach(button => {
        button.addEventListener('click', function() {
          // Get the parent container
          const container = this.parentElement;
          // Get the password input field
          const passwordField = container.querySelector('input');
          
          // Toggle between password and text type
          if (passwordField.type === 'password') {
            passwordField.type = 'text';
            this.classList.remove('bx-hide');
            this.classList.add('bx-show');
          } else {
            passwordField.type = 'password';
            this.classList.remove('bx-show');
            this.classList.add('bx-hide');
          }
        });
      });
    });
  </script>
</html>
